#!/usr/bin/env python
#
# Check Tartarus SFTP backup 
#
# Author ZMo <simoneroselli78@gmail.com>
#
# Nagios plugin for Tartarus backup -
# Tartarus is a software for store remote backup
# http://wertarbyte.de/tartarus/doc/tartarus.txt
#
# The "check_tartarus_backup" plugin, aim to verify the state of those
# remote backups. In order to connect to the remote SFTP server, an
# external file (/etc/tartarus/generic.inc) is read.
#
# The plugin perform follow checks:
# * Remote host is up
# * Backup files are not older than 't' (t = time in seconds)
# * Print the latest/oldest backup files
# * Amount of remote space available (TODO)
# * Percent of increment/decrement since the last backup (TODO)

import sys, time, datetime, os, re
import paramiko as p

BACKUP_MAX_AGE = 86400
TODAY_SECS = int(time.time())

# Messages output
PRINT_WARN = "TARTARUS BACKUP WARNING: "
NO_FILES = 'no_files'
ZERO_BYTES = 'zero_bytes'

# Retrieve backup name instance from the program-name
BACKUP = sys.argv[0].strip('./')
BACKUP = '_'.join(BACKUP.split('_')[2:])
BACKUP = 'tartarus-' + BACKUP

# Backup configuration file
BACKUP_CFG_FILE = '/etc/tartarus/generic.inc'

# Warning exit
def exit_warn():
    """
    Print  the Warning messages, close the connections and return '1'
    as exit status
    """
    sftp.close()
    transport.close()
    sys.exit(1)

# Check for the remote host
def host_is_up(server):
    """ 
    An easy ping check (2 seconds timeout) to verify that the host
    is up, before running the script
    """
    response = os.system("ping -c 1 -W 2 " + server + ">/dev/null 2>&1")
    if response == 0:
        return True

# Retrieve connection properties from the config file.
def from_conf_file(conf_file, string):
    """
    Retrieve connection properties from an external file.
    """
    f = open(conf_file, 'r')
    for line in f.readlines():
        if string in line:
            value = line.replace('"', '').strip()
            value = value.split('=')[1]

            return value
    f.close()


# Check whether the configuration file exists
if not os.path.exists(BACKUP_CFG_FILE):
    print '%s Conf file "%s" not found!' % (PRINT_WARN, BACKUP_CFG_FILE)
    sys.exit(1)
else:
    # Set connection parameters using the 'from_conf_file' function.
    # It's a little verbose and it's not elegant, but it's better than
    # use 'execfile'
    STORAGE_FTP_SERVER = from_conf_file(BACKUP_CFG_FILE, 'STORAGE_FTP_SERVER')
    STORAGE_FTP_USER = from_conf_file(BACKUP_CFG_FILE, 'STORAGE_FTP_USER')
    STORAGE_FTP_PASSWORD = from_conf_file(BACKUP_CFG_FILE, 'STORAGE_FTP_PASSWORD')

    # SFTP connection setup
    if host_is_up(STORAGE_FTP_SERVER) != True:
        print '%s server either wrong or unreachable!' % (STORAGE_FTP_SERVER)
        sys.exit(1)
    else:
        transport = p.Transport((STORAGE_FTP_SERVER, 22))
        try:
            transport.connect(username = STORAGE_FTP_USER, password = STORAGE_FTP_PASSWORD)
            sftp = p.SFTPClient.from_transport(transport)
            ftp_file_list = sftp.listdir(path='.')
        except p.AuthenticationException:
            print "%s Wrong credentials for SFTP connection" % (PRINT_WARN)
            sys.exit(1)


class CheckTartarus(object):
    """
    CheckTartarus class - 
    The class performs a set of checks on the remote backup. It checks
    if files are on the remote server as well as those files are zero
    bytes or older than 24 hours. The class also performs a backup
    size calculation per files, against the size of the day
    before, in order to retreve the amount (percent%) of the
    increase/decrease occurred.
    """
    def __init__(self, backup_name=None, backup_latest=None, backup_oldest=None):
        self.backup_name = backup_name
        self.backup_latest = backup_latest
        self.backup_oldest = backup_oldest

    def __str__(self):
        return "%s, %s, %s" % (self.backup_name, self.backup_latest, self.backup_oldest)

    @staticmethod
    def file_is_old(max_old, today, file_age):
        """
        file_is_old -
        Given a age treshold, compare the amount of seconds of the
        file's age with the amount of seconds of today (now); return
        False in case the file age is less than 24h (86400 secs) or,
        in case it is older, return the file's age amount of seconds.
        """
        secs_diff = (today - file_age)
        if secs_diff > max_old:
            return secs_diff
        return False

    @staticmethod
    def backup_parse(backup_file, backup_file_list):
        """
        backup_parse -
        Match the backup file name against the sftp remote file
        listing. If the match is done, for every file, store in a list
        the mtime value; get then the max and min value
        (latest/oldest) from this list. Fill the class attribute with
        those values
        """
        tartarus_backup = []
        backup_files = []

        
        for f in backup_file_list:
            if not f.startswith(BACKUP):
                continue
            else:
                backup_age = sftp.stat(f).st_mtime
                backup_files.append(backup_age)
                
        if not backup_files:
            return NO_FILES
        else:
            latest = max(backup_files)
            oldest = min(backup_files)
            
            # Check if the backup is older than 24h
            backup_outdated = CheckTartarus.file_is_old(BACKUP_MAX_AGE, TODAY_SECS, latest)
            if backup_outdated != False:
                days_old = (backup_outdated / 86400)
                return days_old
            else:
                latest = datetime.datetime.fromtimestamp(latest).strftime('%d/%m/%Y')
                oldest = datetime.datetime.fromtimestamp(oldest).strftime('%d/%m/%Y')

                # Fill class attributes
                backup_attr = {
                        'backup_name': backup_file, 
                        'backup_latest': latest, 
                        'backup_oldest': oldest
                        }

                ct = CheckTartarus(**backup_attr)

                tartarus_backup.append(ct)

            return tartarus_backup


# Main: exit status for Icinga
if __name__=='__main__':
    check = CheckTartarus.backup_parse(BACKUP, ftp_file_list)
    if check == 'no_files':
        print "WARNING: No backup '%s' found on remote server!" % (BACKUP)
        exit_warn()
    elif isinstance(check, int) == True:
        print "WARNING: Backup '%s' is %s days old!" % (BACKUP, check)
        exit_warn()
    else:    
        for i in check:
            print "Backup '%s' OK - Latest %s, Oldest %s" % (i.backup_name, i.backup_latest, i.backup_oldest)
